// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: authors.sql

package sqlcgen

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (name, bio, email, date_of_birth)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateAuthorParams struct {
	Name        string
	Bio         sql.NullString
	Email       string
	DateOfBirth sql.NullTime
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createAuthor,
		arg.Name,
		arg.Bio,
		arg.Email,
		arg.DateOfBirth,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio, email, date_of_birth FROM authors
WHERE id = $1
`

func (q *Queries) GetAuthor(ctx context.Context, id uuid.UUID) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Email,
		&i.DateOfBirth,
	)
	return i, err
}

const getAuthorsByBirthdateRange = `-- name: GetAuthorsByBirthdateRange :many
SELECT id, name, bio, email, date_of_birth FROM authors
WHERE date_of_birth BETWEEN $1 AND $2
ORDER BY date_of_birth
`

type GetAuthorsByBirthdateRangeParams struct {
	DateOfBirth   sql.NullTime
	DateOfBirth_2 sql.NullTime
}

func (q *Queries) GetAuthorsByBirthdateRange(ctx context.Context, arg GetAuthorsByBirthdateRangeParams) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, getAuthorsByBirthdateRange, arg.DateOfBirth, arg.DateOfBirth_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.Email,
			&i.DateOfBirth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio, email, date_of_birth FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.Email,
			&i.DateOfBirth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors
SET name = $2,
    bio = $3,
    email = $4,
    date_of_birth = $5
WHERE id = $1
`

type UpdateAuthorParams struct {
	ID          uuid.UUID
	Name        string
	Bio         sql.NullString
	Email       string
	DateOfBirth sql.NullTime
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthor,
		arg.ID,
		arg.Name,
		arg.Bio,
		arg.Email,
		arg.DateOfBirth,
	)
	return err
}
